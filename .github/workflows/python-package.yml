# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test and Build Python Package

on:
  push:
    branches: [ "main", "developer", "feature-ci" ]
  pull_request:
    branches: [ "main", "developer" ]

  # Runs this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 nodeio --count --show-source --statistics
        flake8 nodeio

    - name: Lint with ruff
      run: |
        pip install ruff
        ruff check --output-format=github nodeio
        ruff check --statistics nodeio

    - name: Lint with pylint
      run: |
        pip install pylint
        pylint --fail-under=8 -ry nodeio

    - name: Documentation Coverage
      run: |
        pip install docstr-coverage
        docstr-coverage nodeio


  sast:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Bandit Security Analysis
      run: |
        pip install bandit[toml]
        bandit -c pyproject.toml -r nodeio

    - name: Semgrep Security Analysis
      run: |
        pip install semgrep
        semgrep scan --config auto nodeio


  secret-detection:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Gitleaks Secret Detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  dependency-scan:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Safety Dependency Scanning
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}

  test:
    runs-on: ${{ matrix.os }}
    needs: [lint, sast]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test with pytest
      run: |
        pip install pytest
        pip install coverage
        pip install coverage-threshold
        coverage run --branch --source=nodeio -m pytest tests/ --doctest-modules --junitxml=junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
        coverage report -i -m --show-missing
        coverage html -d coverage-report-${{ matrix.os }}-${{ matrix.python-version }}-html
        coverage xml -o coverage-report-${{ matrix.os }}-${{ matrix.python-version }}.xml
        coverage json
        coverage-threshold --line-coverage-min=90 --branch-coverage-min=80

    - name: Upload pytest Test Results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
          coverage-report-${{ matrix.os }}-${{ matrix.python-version }}.xml
          coverage-report-${{ matrix.os }}-${{ matrix.python-version }}-html/
      if: ${{ always() }}


  build:
    runs-on: ${{ matrix.os }}
    needs: [test]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Build Package
      run: |
        pip install build
        python -m build .

    # - name: Create documentation
    #   run: |
    #     pip install mkdocs
    #     pip install 'mkdocstrings[python]'
    #     pip install mkdocs-material
    #     mkdocs build --config-file docs/mkdocs.yml

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          dist
      if: ${{ always() }}


  sbom:
    runs-on: ${{ matrix.os }}
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .

    - name: Create SBOM
      run: |
        pip install cyclonedx-py
        cyclonedx-py environment --pyproject ./pyproject.toml --mc-type library --outfile env-nodeio-sbom-${{ matrix.os }}-${{ matrix.python-version }}.json
        cyclonedx-py requirements ./requirements.txt --pyproject ./pyproject.toml --mc-type library --outfile nodeio-sbom-${{ matrix.os }}-${{ matrix.python-version }}.json

    - name: Analyze SBOM
      run: |
        npm install -g @cyclonedx/cdxgen
        pip install owasp-depscan
        depscan --src nodeio --reports-dir report_depscan_${{ matrix.os }}_${{ matrix.python-version }} --explain --no-banner
        depscan --src nodeio --reports-dir report_environment_${{ matrix.os }}_${{ matrix.python-version }} --explain --no-banner --bom env-nodeio-sbom-${{ matrix.os }}-${{ matrix.python-version }}.json
        depscan --src nodeio --reports-dir report_nodeio_${{ matrix.os }}_${{ matrix.python-version }} --explain --no-banner --bom nodeio-sbom-${{ matrix.os }}-${{ matrix.python-version }}.json

    # - name: Upload BOM to Dependency-Track
    #   uses: DependencyTrack/gh-upload-sbom@v3.1.0

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          report_depscan_${{ matrix.os }}_${{ matrix.python-version }}
          report_environment_${{ matrix.os }}_${{ matrix.python-version }}
          report_nodeio_${{ matrix.os }}_${{ matrix.python-version }}
          env-nodeio-sbom-${{ matrix.os }}-${{ matrix.python-version }}.json
          nodeio-sbom-${{ matrix.os }}-${{ matrix.python-version }}.json
      if: ${{ always() }}
